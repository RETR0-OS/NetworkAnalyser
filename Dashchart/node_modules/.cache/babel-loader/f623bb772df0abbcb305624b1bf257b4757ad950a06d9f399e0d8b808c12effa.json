{"ast":null,"code":"var _jsxFileName = \"/Users/jalqur/Desktop/NetworkAnalyser/Dashchart/src/Dashboard.js\",\n  _s = $RefreshSig$();\n// Dashboard.js\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport './chart.css';\nimport { PieChart, Pie, Cell, Legend, Tooltip } from 'recharts';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [protocolCounts, setProtocolCounts] = useState([]);\n  const [serviceCounts, setServiceCounts] = useState([]);\n\n  // Define the mappings\n  const protocolMapping = {\n    0: 'tcp',\n    1: 'udp',\n    2: 'icmp'\n  };\n  const serviceMapping = {\n    0: 'http',\n    1: 'private',\n    2: 'domain_u',\n    3: 'smtp',\n    4: 'ftp_data',\n    5: 'eco_i',\n    6: 'other',\n    7: 'ecr_i',\n    8: 'telnet',\n    9: 'finger',\n    10: 'ftp',\n    11: 'https'\n  };\n  useEffect(() => {\n    // Fetch the CSV file from the public directory\n    const fetchData = async () => {\n      const response = await axios.get('/captured_network_data.csv');\n      const parsedData = Papa.parse(response.data, {\n        header: true\n      });\n      const data = parsedData.data;\n\n      // Count the occurrences of each protocol type\n      const protocolCount = data.reduce((acc, row) => {\n        const protocolType = row.protocol_type; // Assuming protocol_type is the column name\n        if (protocolType !== undefined) {\n          const mappedProtocol = protocolMapping[protocolType] || 'unknown'; // Fallback for unmapped protocols\n          acc[mappedProtocol] = (acc[mappedProtocol] || 0) + 1;\n        }\n        return acc;\n      }, {});\n      const countsArray = Object.entries(protocolCount).map(([protocol, count]) => ({\n        name: protocol,\n        value: count\n      }));\n      setProtocolCounts(countsArray);\n\n      // Count the occurrences of each service type\n      const serviceCount = data.reduce((acc, row) => {\n        const serviceType = row.service; // Assuming service is the column name\n        if (serviceType !== undefined) {\n          const mappedService = serviceMapping[serviceType] || 'unknown'; // Fallback for unmapped services\n          acc[mappedService] = (acc[mappedService] || 0) + 1;\n        }\n        return acc;\n      }, {});\n      const serviceCountsArray = Object.entries(serviceCount).map(([service, count]) => ({\n        name: service,\n        value: count\n      }));\n      setServiceCounts(serviceCountsArray);\n    };\n    fetchData();\n  }, []);\n\n  // Define colors for the charts\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AA0DFE', '#F806FF', '#800000'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Anomaly Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Protocol Type Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PieChart, {\n          width: 400,\n          height: 400,\n          children: [/*#__PURE__*/_jsxDEV(Pie, {\n            data: protocolCounts,\n            cx: \"50%\",\n            cy: \"50%\",\n            outerRadius: 120,\n            dataKey: \"value\",\n            label: true,\n            children: protocolCounts.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n              fill: COLORS[index % COLORS.length]\n            }, `protocol-cell-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {\n            verticalAlign: \"bottom\",\n            height: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Service Distribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PieChart, {\n          width: 400,\n          height: 400,\n          children: [/*#__PURE__*/_jsxDEV(Pie, {\n            data: serviceCounts,\n            cx: \"50%\",\n            cy: \"50%\",\n            outerRadius: 120,\n            dataKey: \"value\",\n            label: true,\n            children: serviceCounts.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n              fill: COLORS[index % COLORS.length]\n            }, `service-cell-${index}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {\n            verticalAlign: \"bottom\",\n            height: 36\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"DAUZ2l5glId+GqQPG/aRPlJ1EbA=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","PieChart","Pie","Cell","Legend","Tooltip","Papa","axios","jsxDEV","_jsxDEV","Dashboard","_s","protocolCounts","setProtocolCounts","serviceCounts","setServiceCounts","protocolMapping","serviceMapping","fetchData","response","get","parsedData","parse","data","header","protocolCount","reduce","acc","row","protocolType","protocol_type","undefined","mappedProtocol","countsArray","Object","entries","map","protocol","count","name","value","serviceCount","serviceType","service","mappedService","serviceCountsArray","COLORS","children","className","fileName","_jsxFileName","lineNumber","columnNumber","width","height","cx","cy","outerRadius","dataKey","label","entry","index","fill","length","verticalAlign","_c","$RefreshReg$"],"sources":["/Users/jalqur/Desktop/NetworkAnalyser/Dashchart/src/Dashboard.js"],"sourcesContent":["// Dashboard.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport './chart.css';\r\nimport { PieChart, Pie, Cell, Legend, Tooltip } from 'recharts';\r\nimport Papa from 'papaparse';\r\nimport axios from 'axios';\r\n\r\nconst Dashboard = () => {\r\n  const [protocolCounts, setProtocolCounts] = useState([]);\r\n  const [serviceCounts, setServiceCounts] = useState([]);\r\n\r\n  // Define the mappings\r\n  const protocolMapping = { 0: 'tcp', 1: 'udp', 2: 'icmp' };\r\n  const serviceMapping = {\r\n    0: 'http',\r\n    1: 'private',\r\n    2: 'domain_u',\r\n    3: 'smtp',\r\n    4: 'ftp_data',\r\n    5: 'eco_i',\r\n    6: 'other',\r\n    7: 'ecr_i',\r\n    8: 'telnet',\r\n    9: 'finger',\r\n    10: 'ftp',\r\n    11: 'https',\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch the CSV file from the public directory\r\n    const fetchData = async () => {\r\n      const response = await axios.get('/captured_network_data.csv');\r\n      const parsedData = Papa.parse(response.data, { header: true });\r\n      const data = parsedData.data;\r\n\r\n      // Count the occurrences of each protocol type\r\n      const protocolCount = data.reduce((acc, row) => {\r\n        const protocolType = row.protocol_type; // Assuming protocol_type is the column name\r\n        if (protocolType !== undefined) {\r\n          const mappedProtocol = protocolMapping[protocolType] || 'unknown'; // Fallback for unmapped protocols\r\n          acc[mappedProtocol] = (acc[mappedProtocol] || 0) + 1;\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      const countsArray = Object.entries(protocolCount).map(([protocol, count]) => ({\r\n        name: protocol,\r\n        value: count,\r\n      }));\r\n\r\n      setProtocolCounts(countsArray);\r\n\r\n      // Count the occurrences of each service type\r\n      const serviceCount = data.reduce((acc, row) => {\r\n        const serviceType = row.service; // Assuming service is the column name\r\n        if (serviceType !== undefined) {\r\n          const mappedService = serviceMapping[serviceType] || 'unknown'; // Fallback for unmapped services\r\n          acc[mappedService] = (acc[mappedService] || 0) + 1;\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      const serviceCountsArray = Object.entries(serviceCount).map(([service, count]) => ({\r\n        name: service,\r\n        value: count,\r\n      }));\r\n\r\n      setServiceCounts(serviceCountsArray);\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Define colors for the charts\r\n  const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#AA0DFE', '#F806FF', '#800000'];\r\n\r\n  return (\r\n    <div>\r\n      <header className=\"app-header\">\r\n        <h1>Anomaly Dashboard</h1>\r\n      </header>\r\n      <div className=\"chart-container\">\r\n        <div className=\"chart-card\">\r\n          <h2>Protocol Type Distribution</h2>\r\n          <PieChart width={400} height={400}>\r\n            <Pie\r\n              data={protocolCounts}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              outerRadius={120}\r\n              dataKey=\"value\"\r\n              label\r\n            >\r\n              {protocolCounts.map((entry, index) => (\r\n                <Cell\r\n                  key={`protocol-cell-${index}`}\r\n                  fill={COLORS[index % COLORS.length]}\r\n                />\r\n              ))}\r\n            </Pie>\r\n            <Tooltip />\r\n            <Legend verticalAlign=\"bottom\" height={36} />\r\n          </PieChart>\r\n        </div>\r\n\r\n        <div className=\"chart-card\">\r\n          <h2>Service Distribution</h2>\r\n          <PieChart width={400} height={400}>\r\n            <Pie\r\n              data={serviceCounts}\r\n              cx=\"50%\"\r\n              cy=\"50%\"\r\n              outerRadius={120}\r\n              dataKey=\"value\"\r\n              label\r\n            >\r\n              {serviceCounts.map((entry, index) => (\r\n                <Cell\r\n                  key={`service-cell-${index}`}\r\n                  fill={COLORS[index % COLORS.length]}\r\n                />\r\n              ))}\r\n            </Pie>\r\n            <Tooltip />\r\n            <Legend verticalAlign=\"bottom\" height={36} />\r\n          </PieChart>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}